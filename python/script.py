import numpy as np
import matplotlib.pyplot as plt

def parse_hex_data(hex_data):
    """
    Parse the hex data into a 2D NumPy array of 16-bit integers.
    
    Parameters:
        hex_data (str): Multiline string with hexadecimal values.
    
    Returns:
        numpy.ndarray: 2D array of 16-bit integers.
    """
    # Split the data into lines
    lines = hex_data.strip().split('\n')
    lines = [line.strip() for line in hex_data.strip().split('\n')]
    
    # Parse each line
    parsed_data = []
    for line in lines:
        # Split the line into 4-character chunks (16-bit hex values)
        row = [int(line[i:i+4], 16) for i in range(0, len(line), 4)]
        parsed_data.append(row)
    
    # Convert to a NumPy array
    return np.array(parsed_data, dtype=np.uint16)

def plot_heatmap(data, title="Heatmap", cmap="viridis", output_file=None):
    """
    Plots a heatmap from a 2D array of integers.
    
    Parameters:
        data (numpy array): 2D array of 16-bit integers.
        title (str): Title of the heatmap.
        cmap (str): Colormap for the heatmap.
        output_file (str): Path to save the heatmap image. If None, it shows the plot.
    """
    plt.figure(figsize=(10, 8))
    plt.imshow(data, cmap=cmap, aspect='auto')
    plt.colorbar(label='Intensity')
    plt.title(title)
    plt.xlabel('Columns')
    plt.ylabel('Rows')

    # Save or show the heatmap
    if output_file:
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"Heatmap saved to {output_file}")
    else:
        plt.show()

if __name__ == "__main__":
    # Hexadecimal data
    hex_data = """
3CC11B79E6622663362721C21BBB39110E3516FA1DD31BEE48761CAC15D6352D0BA61ADF271626B51F33216B1AFA38CF14FB34441714344423C84957381518B0
349E34A70DDC19DE19921C0015E039D3244135D3363227C3357B36543EA823D23AE2345F1F6B24CE37B80DF2165825AE1BF214611AD65926213D550E18745F9A
03CC1BD8015D373638AB0BA6397024CB26B41F33250732E61BAB1718223619A522B104794592267C1BCD343124E81D9F26860BA634726B613A829D12DE9E357E
3F5C22CF23D91DD21F2522D621CE21051D3321051C9B1CF620071FD41FD9224D229C2017225F20BE1FAD1F411FEA21BD1D8026E1238224B92260218221A989B5
24881B3437921EF2266813061AEE22A5082C12ED132F1BA3216710EA15043ABF1A441795239722F01BB51B12125D27DA0F4E3C7D1ACF25691F3C373639D30F66
243063BC0BA9129E1B721C510D1925401AEB2824281A1F5027E53D1A2602209127F234B01B0722D937A407DB0FBE1EA718530F19104632171DB622D612813713
0631136FF9D340483C961A4425C51E43205A18021BDE39570BA61B2B1B5015821DF4049026B3227416704C221FC517CD2381168D3B62227325C722BF3812277E
24071F7D19F4103517E91A1C1BB719F91C251B1B16461353185617B919431DCC1F251C431DB21DA81E6A19C51D711CF3186222E41C521D7E1DF01A511EF52349
20931BBE2823207023F00FC6173E1FC20CAA0F2D115D173F1FE11C091582EF001A16165123F821FE18C01AF9119E247E134A72DF1A5E240A1FB43711514A125F
235F25230B2A14F21AA81C24116621DD18D6259E256A1D28257776A224141F7D254A45171AD820CE49CD128B14AB1D60174F14221206388B17F520380E8F39A2
100A13C701047699281A19B423701BE21F8413A31AD85536180F17BB198817C11DB90DCD24E122061A91E4D11D3414BE1F111784459922B123B321813A7725DD
228A1C321A9C121A14B11902190219390F2C171C129C0D9B1488173216371D5C1E431D0B1E291C091D1E16BD1B0E1C67187C2073199F1D161B291C1C1B8F1F28
1E74185427221CD8228C10A217D11F980D2414311BEB16B81D0D0ECB152E27E51C1A13AF2148204D17D719F40BA6228A137C25CA19B4224D1C554B4726A81C48
1F1724730DAB0F7316A317990F9C1F7517F323F823D31CC0234D25C8209C1F6B274A4B96198C211627CD0F381C0E1A25176E15100F743EC0174520B90E584579
C4960E330580B071274115FF224719661C0310E3194727521BF41BF615AF17FB1F820D43241A20FA17EE27401BC61455205C1B000E68204C235120A74F1325DC
21011B22166316BD15BC1AC417EB18A10D96179013000D7C1173140813701CAD20B61F131D771DDB1D1619831A8118AA18111F8A1B791CE819AF1B1C194B20C1
1A1214681AA916BB182F1A5E12EE12C7186F0BA6170C142D154F17AC17421CDE21A4222423801F901DE61E311DD01BF51E2E1B021D701ABA186B1C391BBC1FFF
3769203C059A20B41F8C08441D3716080D081C8A169924401A09170416841DAA4BDC26A727E83B8923CF1B6214BF1FA1240B2383116822B03723114618E11E06
19DF0BA6041B1A441F5A1C3017ED082D271424BA05DFC8D7177518131C4618DC1E3148063644250C282A23271C3C112B1C02254521B326C0207C22591A3738D4
1DB0362F23FF1F3E1713265B1E8025A047CF1CB45C5D13561F5E1DBC215A38E027D234A1489C39B81F8F2249223C121114A11A6C1B4C1F0F16651F6F25F32473
16AF0E461CC218B90F841D2015E6121619F007D5190F1251194018BE1B162097251523EC268A235F202321B31ECE1BE91F281C2E1DCF197E1AFE1B741EF61D54
37D8221806DE21CA206106C41D4E16DE0B651E3B135224561B311B441A901D5E27D0257527073AC822D31BDA0DB21F5A250323760C392220372B101C1CED1CCE
1E8E1708FA731E0021F716E116B9062B26A02585005D0FE4175E182D1BEB15AF192727FA343321F92650225D1834160516AE257D251A283420F823C3163736CF
1C4F353925701FFC16F327A91E1225E73F461B6141900E8F209A1DBC1FE642D3229B33352413282D1AF2207D224E0F6215DD1CA01C2E218E1ABE20B324B52812
1AFE15121C331A0B14FC1D4B10C5129B1ADD0F3F188514F4175014EB11FF157E1A261B281EE419C31C231D2D1DDC1BAB20041B7D201819C91B561BD51C501EC7
33012418023822B720930BC31C87146307BE1F7C17C826431D4F168019DD165024E21E1620E758A7209A164310B42004265523F30EB026013416108012221B44
1ED911D9E3721ED42171179F1A1905604F23284EF914057F1BFD184606E4131B1C3023D037B91D55259A21D51C5C11FB1A5D27EF24EC991F22C125151BBE355B
1D0F37CD267C20CB157C394321C65C5036D7202E35780EFB231C204520FA375122663366234B915F174E205E21D5143A1AD5195C1DA521631ABD23F2277826DE
22191B2C22661DB91CCA229F1C031B4D1FCC187C1F901ABD1F931BFB1B8E1A851E831C541E3E1DD41D7421DA219121572195204D226D1EA71F912209232B228D
5B423ECE020C1E1C26790CCC24151D960C0123DC1FCD3985224C1C5A1ABD1CCC49D221CB244E391521EE1D3813AB251C3D0644D912D145AE4DE31A58217121FC
254012B2D0F0250E5C5017461F5E0B0E35663B5FF01D045D0E3A1F821338181218182843342F217A280D25971C0A1B2F17133C8944FF33EE2676456122956EFB
25944450375727A71C3E34AE25DC34216DE024F1371413E02730248225D835C7B81F83E74E3132A31D532527274E15A31E08237324BE85ED183223D3376D35B3
    """
    
    # Parse the data
    parsed_data = parse_hex_data(hex_data)
    
    # Plot the heatmap
    plot_heatmap(parsed_data, title="Parsed Heatmap")
