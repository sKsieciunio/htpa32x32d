import numpy as np
import matplotlib.pyplot as plt


def parse_hex_data(hex_data):
    """
    Parse the hex data into a 2D NumPy array of 16-bit integers.
    
    Parameters:
        hex_data (str): Multiline string with hexadecimal values.
    
    Returns:
        numpy.ndarray: 2D array of 16-bit integers.
    """
    # Split the data into lines
    lines = hex_data.strip().split('\n')
    lines = [line.strip() for line in hex_data.strip().split('\n')]

    # Parse each line
    parsed_data = []
    for line in lines:
        # Split the line into 4-character chunks (16-bit hex values)
        row = [int(line[i:i + 4], 16) for i in range(0, len(line), 4)]
        parsed_data.append(row)

    # Convert to a NumPy array
    return np.array(parsed_data, dtype=np.uint16)


def plot_heatmap(data, title="Heatmap", cmap="viridis", output_file=None):
    """
    Plots a heatmap from a 2D array of integers.
    
    Parameters:
        data (numpy array): 2D array of 16-bit integers.
        title (str): Title of the heatmap.
        cmap (str): Colormap for the heatmap.
        output_file (str): Path to save the heatmap image. If None, it shows the plot.
    """
    plt.figure(figsize=(10, 8))
    plt.imshow(data, cmap=cmap, aspect='auto')
    plt.colorbar(label='Intensity')
    plt.title(title)
    plt.xlabel('Columns')
    plt.ylabel('Rows')

    # Save or show the heatmap
    if output_file:
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"Heatmap saved to {output_file}")
    else:
        plt.show()


if __name__ == "__main__":
    # Hexadecimal data
    hex_data = """
0BFC0BC10BC00B680B690B7C0B750BA30B7C0BAA0B8E0B8F0B860BB20BE30C070BE80BCE0BB00B950BAA0B9F0B860B9D0B870B9D0B850B880B830B960B9D0BFC
0BF60BBA0B9D0B990B6D0B7F0B840B9D0BB30B860B700B9D0B940B8E0BC70BD60BF90C020BB10BBE0B9D0B8B0B9D0B920B7D0B880BA00B720B840B920B9D0BC3
0BD80B620B810B860B950B8B0B710B930B930B9A0B940B9D0B7A0B9A0B7A0BBF0BCE0BEA0BC40BAA0BC30BA20B710B8B0BA30B7E0B800B750BA90B8E0B8D0BA8
0BC40B790B860B750B960B8F0BB80B8B0B880B7D0B670B8C0B9F0B720B920B9D0BE00BDA0BF90BBA0BC00BBF0B960B880B8F0B770B990B880B7E0BAE0BA60BD3
0BC90BAE0B8B0B660B560B610B660B970B8F0B8A0B7C0B9A0B790B870B840B790BA10BEB0BDB0BBE0BA70B7C0BA20B930B790B7A0B750BC50B810B810B720B87
0BD20BAA0B660B7D0B770B790B7B0B840B830B920B6B0B930B7B0B870B7E0B7B0B800B9A0B9F0B8B0B8B0BA40B970B7C0B6E0B890B950BAD0B6C0BA40B780B79
0BDE0BC90BB80B970B6E0B890B7A0B710B840B750B8E0B800B7F0B920B7B0B740B840B830B6D0B820B890B900B920BA90BA50B9D0B9D0B6F0B950BC30B6B0BA1
0BDE0BCE0BAD0B9D0B860B640B830B660B7E0B810B790B820B9B0B8B0B960B960B850B8D0B880B9D0BA50BBE0B920B8F0B7E0B9A0B930B920B9D0BB90BB30B81
0BE10BCE0BD80B920B6F0B860B700B6E0B820B940B8E0B9E0BAD0B8E0B990BA00B8E0B940B990BB30BCE0BD80BA50BA80B850B890B820B800B7C0B730B8D0BAD
0BE40BD70BC80BBD0B800B6E0B950B8B0B9B0B900B8C0BB10BA80BA50BB80B870B840B920B7C0BA40BC50BF00BBB0B980B8E0B920B9D0B780B6E0B870B8E0B6B
0BCC0BE60BD10BA10B7C0B980B8D0B870B9D0B950BAB0BCB0BE30BE80BC00BA50B930B930B8E0B7E0BC40BE00BCB0BB00BA10B830B8C0B630B930B920B8B0B88
0BE40BCD0BC00BBC0BAA0B750B8F0B920B840B9E0BAD0BE50C000BFC0BED0BE50BBA0B8B0B8F0B7F0BC20BE00BE30BC60BAA0B870B9D0B850B8A0BB30BB40B95
0BDD0BDB0BCA0BAF0B9D0B8B0B680B9D0B8E0B930BC20BD00BFE0BF40BEA0BDC0BA80B9F0B900B7D0B7F0BC10BF00BC00BA50B900B8B0B9D0B7C0B630B6C0B95
0BCE0BDA0BB70BC10B8C0B8F0B950B970BB00BB50B9B0BD00BD80BD60BC80BB40BA80B9B0B840B820B800BA00BE40BC00BB80B950BA40B800B780B700B660B7A
0BF00BE90BCF0BAF0B790B990BB40BB00BC30BCE0BE30BD60BE90BDF0BC80B9B0BAD0BA50B8B0B730B780B9B0BB30BDD0BB20B8A0B8B0B920B790B890B3B0B86
0BF90BCB0BD40BA80B8C0B990BAD0BC00BCC0BF60BEF0BFD0C020BFE0BE30BD10BDE0BA50B900B750B8A0B7C0BB00BDA0BBC0B9F0B8D0B810B6A0B7C0B920B7B
0BD30BC40BB70B870B7F0B850B9D0BA90BC90BF20BED0C090C030C040C050BEA0BDB0BA50B940B880B770B710B8D0B990B870B820B980B8A0B8B0B6C0B7B0B95
0BDD0BC50B890B8A0B920B990BA00BA80BC80BED0BEE0BF80BF40BFA0BF70BF50BCD0BAD0B870B800B6B0B840B720B750B960B7E0B830B670B910B840B7C0B6B
0BB50B7F0B950B7D0B7C0B8B0B8C0BA80BBD0BEF0BED0C010C050BF80C060BEA0BA60B840B7C0B870B800B800B670B850B780B7D0BA10B6E0B770B760B6A0B91
0B9D0B7F0B800B950B850B8F0B8E0B920BB00BF40C020C080BF70BEF0BED0BCA0B8A0B7C0B850B720B720B890B800B850B7C0B720B900B810BA50B680B840B7B
0B7C0B9D0BB30B890B9F0B8F0B9B0B9B0BBA0BF40BF00C000C000C090BF70BAF0B8E0B9D0B7B0B890B870B860B7F0B8B0B7F0B840B9D0B8A0B6F0B750B680B99
0BB50BB40BC20BBB0BC30BCF0BC10BC60BCB0BF30C000BEB0BEE0BF90BC10B990B870B870B8B0B700B7C0B6E0B830B760B830B770B8A0B720B870B8C0B7A0B4C
0B8A0BBA0BDC0BBC0BD60BC60BBF0BD80BBE0BFE0BFC0C0B0C110BEA0BD10B990B920B6E0B830B890B880B8A0B840B870B7F0B7D0B790B6D0B750B960BA60B95
0BC60BB80BBF0BC30BBE0BCB0BC10BDA0BD10BDC0C000C020BFC0BE10BAB0BAA0B890B700B8D0B740B7F0B820B8A0B800B6E0B950B9D0B970B960B840B860B91
0BAF0BA80BB80BAE0BC40BB60BBD0BBE0BBC0BD30BE20C070BF40BDC0BB70BA00B8C0B9B0B7F0B8B0B6D0B870B8E0B870B6B0B6F0B880B7D0B7E0B800B5E0B61
0BB60BCF0BC70BC20BBE0BCF0BC20BBE0BD20BD20BE50BD30BDB0BB90BBD0BC70BBD0BA20BAB0B6E0B750B870B790B6D0B920B720B670B890B590BB90B690B82
0BC20B960BB40BAD0BB50BCE0BBD0BCC0BB10BB00BAD0BC80BC00BB10BC90BBC0BC00BB20BA80B870B5B0B750B8F0B730B910B710B840B650B660B850B990B7B
0BC60BBE0BCC0BC40BDB0BB30BC90BC30BD10BCC0BC60BCE0BBC0BAF0BB70BA80BAE0BBE0BAA0B8B0B830B6D0B750B720B7B0B8C0B960B800B850B340BB20B84
0BF70BC90BD10BCE0BCA0BD00BB80BBF0BBE0BC40BB00BBB0BC70BC90BC30BB20BC40BD20BAD0BC00B950B920B940B7B0B8D0B7E0B8E0B7F0BA40B820B800BA1
0BD30BC00BCF0BD30BBF0BD50BD30BD40BD30BC50BC60BD70BB80BCA0BBD0BC50BCC0BE70BB60B9F0B850B940B870B990B7B0B800B7A0B800B900B9D0B800B8C
0BB90BA00BE50BAA0BE00BA90BD50BC00BC50BC40BD30BB50BD60BBC0BBA0BBA0BDA0BB20BC30BBB0B790B9D0B930B8F0B990B750BBE0B530B670B9D0B9D0B8A
0BBB0BB90BA80BEF0BE40BD40BDB0BCB0BBE0BED0BB70BD60BDA0BD20BB00BB70BD30BCE0BBA0B930B8F0B9D0B710BAD0B6A0BA80B990BAD0B980B6B0BAD0BBD
    """

    # Parse the data
    parsed_data = parse_hex_data(hex_data)

    # devide by 10 and subtract 273.15 to convert to Celsius
    parsed_data = (parsed_data / 10) - 273.15

    # Plot the heatmap
    plot_heatmap(parsed_data, title="Parsed Heatmap")
