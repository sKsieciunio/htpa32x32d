import numpy as np
import matplotlib.pyplot as plt

def parse_hex_data(hex_data):
    """
    Parse the hex data into a 2D NumPy array of 16-bit integers.
    
    Parameters:
        hex_data (str): Multiline string with hexadecimal values.
    
    Returns:
        numpy.ndarray: 2D array of 16-bit integers.
    """
    # Split the data into lines
    lines = hex_data.strip().split('\n')
    lines = [line.strip() for line in hex_data.strip().split('\n')]
    
    # Parse each line
    parsed_data = []
    for line in lines:
        # Split the line into 4-character chunks (16-bit hex values)
        row = [int(line[i:i+4], 16) for i in range(0, len(line), 4)]
        parsed_data.append(row)
    
    # Convert to a NumPy array
    return np.array(parsed_data, dtype=np.uint16)

def plot_heatmap(data, title="Heatmap", cmap="viridis", output_file=None):
    """
    Plots a heatmap from a 2D array of integers.
    
    Parameters:
        data (numpy array): 2D array of 16-bit integers.
        title (str): Title of the heatmap.
        cmap (str): Colormap for the heatmap.
        output_file (str): Path to save the heatmap image. If None, it shows the plot.
    """
    plt.figure(figsize=(10, 8))
    plt.imshow(data, cmap=cmap, aspect='auto')
    plt.colorbar(label='Intensity')
    plt.title(title)
    plt.xlabel('Columns')
    plt.ylabel('Rows')

    # Save or show the heatmap
    if output_file:
        plt.savefig(output_file, dpi=300, bbox_inches='tight')
        print(f"Heatmap saved to {output_file}")
    else:
        plt.show()

if __name__ == "__main__":
    # Hexadecimal data
    hex_data = """
822E829C82158180819A81CD815481738146819881D9813A81AF814D81DE80C1813C80A781AD81D68192814F81BB8211824481B081EF8114818681AE81AE814B
81E5810C813A81C280DF8212814D818781F5813D815C8212824881198263816081F4813C81B5814D8152815C812F816981D18132823F81B48114813080D9818B
811581B2821D820481B88259815D81B9819581D881B8822C81AC820081EE81DD8151810C8151823D81A781DE810082AA81CB814E81B6811B81AD8262828581BF
81D6811481CA81D580E68253823C8226813C80EE81CC817F80C581FA811F80F8815E819081D28109815381768091819280E1817981038105819D813481858126
823682AA8221818781A481D3815681738145819A81D9814281B5815281E280C6814280AD81B381DF819D815781BC8216824B81B281F6811E818A81AD81B08147
81F3811A813E81BE80E482148150818881F1813F815B8219824D811E8269816081F6814881B58153815481588133817381D48139824081B3811B813080E18190
813481C08226820B81C1825E815D81B9819381DC81B6822E81AF81FF81F581E4815A81168157824681B781E2810582AD81CD814C81B6811D81AF8266828681C3
81FC813781DB81E080E8825A823A8227814680F981CC818180C98202812280FB8164819381DE8113815B81838098819680E5817781098106819E813781858128
826482D68244819381AF81DA815781758149819B81DB814281B8814F81E380CA814680B581B681E9819B815981C28215824E81B481FB811F818B81AE81B28151
82258141817481EE80F782228152818D81FA81458162821C824E811D826D816C81FF814881BB8159815C81618134817081D98138823F81B6811C812F80DF8193
815281ED825D824381E9826E816081C0819C81DF81BF823481B2820581F781E9815F811E815E824C81B581E6810B82B681D5814E81BA811F81B18262828981C8
821A815782128217811A826B82498235814A80FC81D1818180C681FD811E8104816F81A381EC811B815E8182809A819680E7817A810A810B819F81358184812E
827382EA825F81C881DA81F88165817A814E81A281DF814781B6815181E380D0815A80D781D381F281A5815D81C18213824F81B781F68120818A81B281B58153
822C815281828203811A8239815581928201814A8163821E82538122826E816C81FE815181EB816E816581628139817581D78139824181B9811A813180E78193
815181EF8260824781F38271816981C7819E81DF81C1823B81B2820A81FB81E3815E811C8168825081B381E3810D82B081D5814E81BD812481B78262828081C5
8204814982058209810A826382498231814980FC81DA818A80D18204811F80FB816881988205812881608187809D819B80E6817C8108810A819F8137818C8126
81868172823B8142814E811C81DE82AC81A681A6827A8141813A8176813881AC817B810381BA81BC816C81F0816F80F6828581D180BA819D812F812B81738143
823D819A81D1824B81E181F4820E827C8264816481CF829A817D81E8815A81C080FF81F782958164822F81F6814A8125816A813481D5819B81D9813F82828190
818F8228823A828581C6827F821181B781858249821581E1821981E2825A824A821D8290829D80E881D281E08214823281928185814B821B818A813880E98157
8240823681F281D6824A813180C581C481F881A280EE822A812E822A81798184821D81B182AC81E7818F812381FF81A281DD8160817781B38117815881C38183
8173815D821981288144811781DE82AA81A881AF8277814381398178813681B08179810181B781B9816D821B81848100828381CD80B881A18132813081748145
823A819081CB824481DB81EE8209827E8267815E81CC8296817481E2815D81C280F981F7829481638213820A816B8133816D813A81D3819A81DD814282838191
81898223823B828481C7827B821481B481848249820B81DA821A81E3825282498220828A829E80E981B481CF8230823D8198818781438219818D813C80E88153
823C823681F481CF8244812D80C281BC81F7819F80E382248126822781788183821E81B482AB81E68183810E821181B581E68166817A81B18115815A81C78183
81758156821A81248142811381D582A881A181A382728134812D816F813481B08179810081AF81B181558208818D810C828B81CB80BA81A28131812781788144
8235818C81C7824581DA81F08208827B8262815A81C8828F816F81E3815C81CA810181F982958163821281F98165813D8172813781D6819981D481408287818C
818482218238828481C48279820C81B28183823C820681D8821681E2825C825782278290829780E781B581CB822182478197818481498219818A813680E7814F
823C823081F081CE8245812B80C281BB81F5819C80E3821F81298225817C8189821A81B382B381E68181810A820881B081E38166817C81B38116815A81C38185
816A8156821481258142810E81D782A6819F81A082718135812D8170813381AC8178810281B081B7815681FD81828107828981CD80B881A2812C812A81768144
8231818A81C4823F81DA81EB8206827B8265815C81C3828F817281E6815781C280FD81F382948166821181F7815C812D816E813A81D4819881D6813C827F818F
8189821D8235827F81BF8275821281B181808241820881D6821381E1824F82468218828A829680EA81B281C282178235818E8185814882178187813680E28152
8239822C81EC81CC8240812780BE81BE81F6819B80DD82218127822281748180821481AC82A981E38186810081F181A481DB8160817681AB810C815181BE817F
    """
    
    # Parse the data
    parsed_data = parse_hex_data(hex_data)
    
    # Plot the heatmap
    plot_heatmap(parsed_data, title="Parsed Heatmap")
